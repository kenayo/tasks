# Римский А.А. swordscream@yandex.ru
from заказ import Заказ
from пицца import ПиццаДарыМоря, ПиццаБарбекю, ПиццаПепперони


class Терминал:
    """Класс Терминал обеспечивает взаимодействие с клиентом."""

    КОМПАНИЯ = 'Старые штаны'
    КОМАНДА_ОТМЕНА_ЗАКАЗА = -1
    КОМАНДА_ПОДТВЕРЖДЕНИЕ_ЗАКАЗА = 0

    def __init__(self):
        """Конструктор класса.

        self.меню: список доступных пицц;
        self.заказ: список заказанных пицц;
        self.отображать_меню: определяет отображение меню
                              равен True: при создании терминала,
                              после отмены или подтверждения заказа.
        """
        # Доступные пиццы
        self.меню = [ПиццаПепперони(), ПиццаБарбекю(), ПиццаДарыМоря()]
        self.заказ = None
        self.отображать_меню = True

    def __str__(self):
        """Вернуть строковое представление класса.

        Формат вывода:

        Имя пиццерии, версия программы.
        """
        return Терминал.КОМПАНИЯ + ' ver 1.0\n'

    def показать_меню(self):
        """Показать меню.

        Показать меню следует только при наличии флага self.отображать_меню
        self.отображать_меню устанавливается в False после вывода меню.

        Формат вывода:

        Пиццерия #1
        Добро пожаловать!

        Меню:
        1. Пицца: Пепперони | Цена: 350.00 р.
           Тесто: тонкое Соус: томатный
           Начинка: пепперони, сыр моцарелла
        2. Пицца: Барбекю | Цена: 450.00 р.
           Тесто: тонкое Соус: барбекю
           Начинка: бекон, ветчина, зелень, сыр моцарелла
        3. Пицца: Дары моря | Цена: 550.00 р.
           Тесто: пышное Соус: тар-тар
           Начинка: кальмары, креветки, мидии, сыр моцарелла
        Для выбора укажите цифру через <ENTER>.
        Для отмены заказа введите -1
        Для подтверждения заказа введите 0
        """
        if not self.отображать_меню:
            return 'Меню скрыто'
        строка = 'Пиццерия #1\nДобро пожаловать!\n\nМеню:\n'
        for i in self.меню:
            if self.меню.index(i) < 10:
                строка += str(self.меню.index(i) + 1) + '. ' + str(i) + '\n'
            else:
                строка += str(self.меню.index(i) + 1) + '.' + str(i) + '\n'
        строка += 'Для выбора укажите цифру через <ENTER>.'
        строка += '\nДля отмены заказа введите ' +\
                  str(Терминал.КОМАНДА_ОТМЕНА_ЗАКАЗА)
        строка += '\nДля подтверждения заказа введите ' +\
                  str(Терминал.КОМАНДА_ПОДТВЕРЖДЕНИЕ_ЗАКАЗА) + '\n'
        self.отображать_меню = False
        print(строка)

    def обработать_команду(self, пункт_меню):
        """Обработать действие пользователя.

        Аргументы:
          - пункт_меню (str): выбор пользователя.

        Возможные значения "пункт_меню":
          - -1: отменить заказ;
          -  0: подтвердить заказ; при этом осуществляется
                выставление счета, оплата, а также выполняется заказ;
                после заказ удаляется (= None)
          - 1..len(self.меню): добавление пиццы к добавить_к_заказу;
                               если заказ не создан, его нужно создать.
          - иначе: сообщить о невозможности обработать команду.

        Каждое действие подтверждается выводом на экран, например:
        1
        Пицца Пепперони добавлена!
        2
        Пицца Барбекю добавлена!
        0
        Заказ подтвержен.
        """

        try:
            пункт_меню = int(пункт_меню)
            if пункт_меню == Терминал.КОМАНДА_ОТМЕНА_ЗАКАЗА:
                self.заказ = None
                print('Заказ отменен.')
            elif пункт_меню == Терминал.КОМАНДА_ПОДТВЕРЖДЕНИЕ_ЗАКАЗА:
                print('Заказ подтвержден.')
                print(self.заказ)
                self.принять_оплату()
                self.заказ.выполнить()
                self.заказ = None
                # Уберите raise и добавьте необходимый код
                # Проверьте, что подтверждение вызывается для созданного заказа
                # При возникновении ошибки необходимо вызвать команду
                # отмены заказа
            elif 1 <= пункт_меню <= len(self.меню):
                    if self.заказ is None:
                        self.заказ = Заказ()
                    self.заказ.добавить(self.меню[пункт_меню - 1])
                    print('Пицца ' + self.меню[пункт_меню - 1].название +
                          ' добавлена!')
            else:
                # За границей меню передаем управление в обработку исключений
                raise ValueError
        except ValueError:
            print("Не могу распознать команду! Проверьте ввод.")
        except Exception:
            print("Во время работы терминала произошла ошибка...")

    def рассчитать_сдачу(self, оплата):
        """Вернуть сдачу для 'оплата'.

        Если оплата меньше стоимости заказа, возбудить исключение ValueError.
        """
        if self.заказ.сумма() > оплата:
            raise ValueError
        return оплата - self.заказ.сумма()

    def принять_оплату(self):
        """Обработать оплату.

        Эмулирует оплату заказа (клиент вводит сумму с клавиатуры).

        Если сумма оплаты недостаточна (определяет метод рассчитать_сдачу())
        или возникает другая ошибка - исключние передается выше.
        """
        try:
            деньги = int(input('Введите сумму: '))
            сдача = self.рассчитать_сдачу(деньги)
            print('Вы внесли {0:.2f} р.'.format(деньги), end=' ')
            print('Сдача: {0:.2f} р.'.format(сдача))
        except Exception:
            print("Оплата не удалась. Заказ будет отменен.")
            self.заказ = None
            raise ValueError
